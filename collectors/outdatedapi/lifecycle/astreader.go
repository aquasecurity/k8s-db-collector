package lifecycle

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
)

type AstReader struct {
}

func NewAstReader() AstReader {

}

func (ar AstReader) Analyze(code string) (K8sAPI, error) {
	// src is the input for which we want to inspect the AST.
	src := `
		//go:build !ignore_autogenerated
	// +build !ignore_autogenerated
	
	/*
	Copyright The Kubernetes Authors.
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
		http://www.apache.org/licenses/LICENSE-2.0
	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	*/
	
	// Code generated by prerelease-lifecycle-gen. DO NOT EDIT.
	
	package v2beta1
	
	import (
		schema "k8s.io/apimachinery/pkg/runtime/schema"
	)
	
	// APILifecycleIntroduced is an autogenerated function, returning the release in which the API struct was introduced as int versions of major and minor for comparison.
	// It is controlled by "k8s:prerelease-lifecycle-gen:introduced" tags in types.go.
	func (in *Aak) APILifecycleIntroduced() (major, minor int) {
		return 1, 8
	}
	
	
	// APILifecycleReplacement is an autogenerated function, returning the group, version, and kind that should be used instead of this deprecated type.
	// It is controlled by "k8s:prerelease-lifecycle-gen:replacement=<group>,<version>,<kind>" tags in types.go.
	func (in *HorizontalPodAutoscaler) APILifecycleReplacement() schema.GroupVersionKind {
		return schema.GroupVersionKind{Group: "autoscaling", Version: "v2", Kind: "HorizontalPodAutoscaler"}
	}
	
	`

	// Create the AST by parsing src.

	// Create the AST by parsing src.
	fset := token.NewFileSet() // positions are relative to fset
	node, err := parser.ParseFile(fset, "src.go", src, 0)
	if err != nil {
		panic(err)
	}
	ast.Inspect(node, func(n ast.Node) bool {
		// Find Return Statements
		ret, ok := n.(*ast.ReturnStmt)
		if ok {
			fmt.Println("\n\t")
			for _, val := range ret.Results {
				if k, ok := val.(*ast.BasicLit); ok {
					fmt.Println(k.Value)
				} else {
					if k, ok := val.(*ast.CompositeLit); ok {
						for _, el := range k.Elts {
							a := el.(ast.Expr).(*ast.KeyValueExpr)
							fmt.Println(a.Value.(*ast.BasicLit).Value)
						}
					}
				}
			}
			return true
		}
		// Find Functions
		fn, ok := n.(*ast.FuncDecl)
		if ok {
			for _, v := range fn.Recv.List {
				fmt.Print("\n\trecv type : ")
				switch xv := v.Type.(type) {
				case *ast.StarExpr:
					if si, ok := xv.X.(*ast.Ident); ok {
						fmt.Println(si.Name)
					}
				case *ast.Ident:
					fmt.Println(xv.Name)
				}
			}
			fmt.Printf("\n\t %s", fn.Name.Name)
			return true
		}
		return true
	})
	fmt.Println()
}
